<?php

/**
 *
 * @file
 * Primary module hooks for prise rendez vous module.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function prise_rendez_vous_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  $form['prise_rdv'] = array(
    '#type' => 'details',
    '#title' => t(' Prise de rendez vous '),
    '#group' => 'additional_settings'
  );
  
  // Load the current node type configuration entity.
  $node_type = $form_state->getFormObject()->getEntity();
  //
  $form['prise_rdv']['prise_rendez_vous_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('ActivÃ© la prise en chage de RDV.'),
    '#default_value' => $node_type->getThirdPartySetting('prise_rendez_vous', 'prise_rendez_vous_enabled', 0)
  );
  //
  $form['prise_rdv']['text'] = [
    '#type' => 'html_tag',
    '#tag' => 'p',
    '#value' => " Vous pourriez configurer un rendez-vous pour chaque contenu ",
    '#states' => [
      'visible' => [
        ':input[name="prise_rendez_vous_enabled"]' => [
          'checked' => TRUE
        ]
      ]
    ]
  ];
  
  $form['#entity_builders'][] = 'prise_rendez_vous_form_node_type_form_builder';
}

function prise_rendez_vous_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  // dd($form_state->getValues());
  if ($form_state->getValue('prise_rendez_vous_enabled') === 1) {
    $type->setThirdPartySetting('prise_rendez_vous', 'prise_rendez_vous_enabled', 1);
    return 1;
  }
  $type->unsetThirdPartySetting('prise_rendez_vous', 'prise_rendez_vous_enabled');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function prise_rendez_vous_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /**
   *
   * @var \Drupal\node\NodeForm $entity
   */
  $FormObject = $form_state->getFormObject();
  
  /**
   *
   * @var \Drupal\node\Entity\Node $entity
   */
  $entity = $FormObject->getEntity();
  $nodeType = \Drupal\node\Entity\NodeType::load($entity->getType());
  $ThirdPartySettings = $nodeType->getThirdPartySettings('prise_rendez_vous');
  /**
   * On ajoute un bouton dans le formulaire afin de permettre de rediriger vers
   * une page d'edition de rdv.
   */
  if (!empty($ThirdPartySettings['prise_rendez_vous_enabled'])) {
    $form['actions']['sava_redirect_rdv'] = $form['actions']['submit'];
    $form['actions']['sava_redirect_rdv']['#submit'][] = '_prise_rendez_vous_submitRedirectRdvForm';
    $form['actions']['sava_redirect_rdv']['#value'] = 'Enregistrer et configurer les prises de rendez-vous';
  }
}

function _prise_rendez_vous_submitRedirectRdvForm(&$form, FormStateInterface $form_state) {
  /**
   *
   * @var \Drupal\node\NodeForm $nodeForm
   */
  $nodeForm = $form_state->getFormObject();
  // on empeche drupal de faire une redirection via destination.
  \Drupal::request()->query->remove('destination');
  $form_state->setRedirect("prise_rendez_vous.manager.get", [
    'entity_type_id' => 'node',
    'id' => $nodeForm->getEntity()->id()
  ]);
}

/**
 * implement hook_entity_base_field_info
 *
 * @param EntityTypeInterface $entity_type
 */
function prise_rendez_vous_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  $entities = [
    'dis_period_entity',
    'equipes_entity',
    'submit_rdv_entity'
  ];
  if (in_array($entity_type->id(), $entities)) {
    if (\Drupal::moduleHandler()->moduleExists('domain')) {
      __prise_rendez_vous_fields_domain($fields);
    }
  }
  return $fields;
}

/**
 *
 * @param array $fields
 */
function __prise_rendez_vous_fields_domain(array &$fields) {
  $field_access = \Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD;
  $field_source = \Drupal\domain_source\DomainSourceElementManagerInterface::DOMAIN_SOURCE_FIELD;
  //
  $fields[$field_access] = BaseFieldDefinition::create('entity_reference')->setLabel(t("Domain access"))->setTranslatable(false)->setDisplayOptions('form', [
    'type' => 'select2_entity_reference',
    'weight' => 40,
    'settings' => [
      'autocomplete' => true
    ]
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\creation_site_virtuel\CreationSiteVirtuel::getActiveDomain');
  //
  $fields[$field_source] = BaseFieldDefinition::create('entity_reference')->setLabel(t("Domain source"))->setDisplayOptions('form', [
    'type' => 'options_select',
    'weight' => 40
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setTranslatable(false);
}
