<?php

/**
 *
 * @file
 * Primary module hooks for prise rendez vous module.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Update value max_length from 50 to 250.
 *
 * implement hook_update_8001
 *
 * @see https://www.drupal.org/node/2554097
 */
function __prise_rendez_vous_update_name_max_length($entity_type_id) {
  // Retrieve existing field data.
  $database = \Drupal::database();
  $names = $database->select($entity_type_id . '_field_data', 'et')->fields('et', [
    'id',
    'langcode',
    'name'
  ])->execute()->fetchAll(\PDO::FETCH_ASSOC);
  // Remove data from the column.
  $database->update($entity_type_id . '_field_data')->fields([
    'name' => NULL
  ])->execute();
  // Remove old definition field.
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $storagedef = $updateManager->getFieldStorageDefinition('name', $entity_type_id);
  $updateManager->uninstallFieldStorageDefinition($storagedef);
  // Load new definition field in code.
  /**
   *
   * @var \Drupal\Core\Entity\EntityFieldManager $fieldManager
   */
  $fieldManager = \Drupal::service('entity_field.manager');
  $fields = $fieldManager->getFieldStorageDefinitions($entity_type_id);
  $updateManager->installFieldStorageDefinition('name', $entity_type_id, "prise_rendez_vous", $fields['name']);
  // Restore entity data in the new schema.
  foreach ($names as $name) {
    $database->update($entity_type_id . '_field_data')->fields([
      'name' => $name['name']
    ])->condition('id', $name['id'])->condition('langcode', $name['langcode'])->execute();
  }
}

/**
 * Update value max_length from 50 to 250.
 *
 * implement hook_update_8001
 *
 * @see https://www.drupal.org/node/2554097
 */
function prise_rendez_vous_update_8001() {
  __prise_rendez_vous_update_name_max_length('submit_rdv_entity');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function prise_rendez_vous_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  $form['prise_rdv'] = array(
    '#type' => 'details',
    '#title' => t(' Prise de rendez vous '),
    '#group' => 'additional_settings'
  );
  
  // Load the current node type configuration entity.
  $node_type = $form_state->getFormObject()->getEntity();
  //
  $form['prise_rdv']['prise_rendez_vous_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('ActivÃ© la prise en chage de RDV.'),
    '#default_value' => $node_type->getThirdPartySetting('prise_rendez_vous', 'prise_rendez_vous_enabled', 0)
  );
  //
  $form['prise_rdv']['text'] = [
    '#type' => 'html_tag',
    '#tag' => 'p',
    '#value' => " Vous pourriez configurer un rendez-vous pour chaque contenu ",
    '#states' => [
      'visible' => [
        ':input[name="prise_rendez_vous_enabled"]' => [
          'checked' => TRUE
        ]
      ]
    ]
  ];
  
  $form['#entity_builders'][] = 'prise_rendez_vous_form_node_type_form_builder';
}

function prise_rendez_vous_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  // dd($form_state->getValues());
  if ($form_state->getValue('prise_rendez_vous_enabled') === 1) {
    $type->setThirdPartySetting('prise_rendez_vous', 'prise_rendez_vous_enabled', 1);
    return 1;
  }
  $type->unsetThirdPartySetting('prise_rendez_vous', 'prise_rendez_vous_enabled');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function prise_rendez_vous_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /**
   *
   * @var \Drupal\node\NodeForm $entity
   */
  $FormObject = $form_state->getFormObject();
  
  /**
   *
   * @var \Drupal\node\Entity\Node $entity
   */
  $entity = $FormObject->getEntity();
  $nodeType = \Drupal\node\Entity\NodeType::load($entity->getType());
  $ThirdPartySettings = $nodeType->getThirdPartySettings('prise_rendez_vous');
  /**
   * On ajoute un bouton dans le formulaire afin de permettre de rediriger vers
   * une page d'edition de rdv.
   */
  if (!empty($ThirdPartySettings['prise_rendez_vous_enabled'])) {
    $form['actions']['sava_redirect_rdv'] = $form['actions']['submit'];
    $form['actions']['sava_redirect_rdv']['#submit'][] = '_prise_rendez_vous_submitRedirectRdvForm';
    $form['actions']['sava_redirect_rdv']['#value'] = 'Enregistrer et configurer les prises de rendez-vous';
  }
}

function _prise_rendez_vous_submitRedirectRdvForm(&$form, FormStateInterface $form_state) {
  /**
   *
   * @var \Drupal\node\NodeForm $nodeForm
   */
  $nodeForm = $form_state->getFormObject();
  // on empeche drupal de faire une redirection via destination.
  \Drupal::request()->query->remove('destination');
  $form_state->setRedirect("prise_rendez_vous.manager.get", [
    'entity_type_id' => 'node',
    'id' => $nodeForm->getEntity()->id()
  ]);
}




